@page "{id:int?}"

@using FoodAndStyleOrderPlanning.Core
@using System.Linq
@model FoodAndStyleOrderPlanning.Pages.Orders.EditModel
@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<form method="post">

    <div class="card">
        <div class="card-body">
            @*<h5 class="card-title">Στοιχεία Συνταγής</h5>*@
            <div class="row">
                <div class="col-sm-8">
                    <input type="hidden" asp-for="@Model.Order.Id" />
                    <input type="hidden" asp-for="@Model.Order.CreatedOn" />
                    <input type="hidden" asp-for="@Model.Order.CreatedBy" />
                    <input type="hidden" asp-for="@Model.Order.UpdatedOn" />
                    <input type="hidden" asp-for="@Model.Order.UpdatedBy" />
                    <div class="form-group">
                        <label asp-for="@Model.Order.Name">Ονομασία</label>
                        <input asp-for="@Model.Order.Name" class="form-control w-100 font-weight-bold" />
                        <span class="text-danger" asp-validation-for="@Model.Order.Name"></span>
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Αποθήκευση</button>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="card" style="width: 18rem;">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Δημιουργία: @Model.Order.CreatedOn.ToString(Helpers.DateTimeFormater)</li>
                            <li class="list-group-item">Από: @Model.Order.CreatedBy</li>
                            <li class="list-group-item">Τροποποίηση: @Model.Order.UpdatedOn.ToString(Helpers.DateTimeFormater)</li>
                            <li class="list-group-item">Από: @Model.Order.UpdatedBy</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <hr />
    <table cellpadding="0" cellspacing="0" id="recipeQuantityTable" class="table table-sm table-striped table-hover">
        <thead>
            <tr>
                <th class="w-25">
                    <select class="custom-select font-weight-bold" id="recipeDisplaySelect" onchange="recipeDisplaySelectionChanged(this.value);">
                        <option class="font-weight-bold" style="background-color:blue; color:white" value="1000">'Ολες οι συνταγές</option>
                        <option class="font-weight-bold" style="background-color:blue; color:white" value="2000">Συνταγές με ποσότητα</option>
                        @foreach (var type in Model.RecipeTypes.OrderBy(r => r.Value))
                        {
                            <option class="fa-bold" value="@type.Key">@type.Value</option>
                        }
                    </select>
                </th>
                <th>Δευ.</th>
                <th>Τρι.</th>
                <th>Τετ.</th>
                <th>Πεμ.</th>
                <th>Παρ.</th>
                <th>Σαβ.</th>
                <th>Κυρ.</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.RecipeChoices.Choices.Count; i++)
            {
                <tr>
                    <td title="Kωδικός:@Model.RecipeChoices.Choices[i].RecipeId - @String.Format("{0:n0}", Model.RecipeChoices.Choices[i].RecipeResultingQuantity) γραμ.">
                        <input type="hidden" asp-for="@Model.RecipeChoices.Choices[i].Id" />
                        <input type="hidden" name="recipeTypeId" asp-for="@Model.RecipeChoices.Choices[i].RecipeTypeId" />
                        <input type="hidden" asp-for="@Model.RecipeChoices.Choices[i].RecipeId" />
                        <input type="hidden" asp-for="@Model.RecipeChoices.Choices[i].Name" />
                        <input type="hidden" asp-for="@Model.RecipeChoices.Choices[i].RecipeResultingQuantity" />
                        @if (!@Model.RecipeChoices.Choices[i].IsActive)
                        {
                            <i class="fa fa-warning" style="color:orange" data-toggle="tooltip" data-placement="top" title="Η συνταγή ειναι ανενεργή!"></i>
                        }
                        <a target="_blank" asp-page="/Recipes/Edit" asp-route-id="@Model.RecipeChoices.Choices[i].RecipeId">
                            @Model.RecipeChoices.Choices[i].Name
                        </a>
                    </td>
                    <td>
                        <input asp-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Monday" onblur="validateQuantity(this);" class="form-control font-weight-bold" />
                        <span class="text-danger" asp-validation-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Monday"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Tuesday" onblur="validateQuantity(this);" class="form-control font-weight-bold" />
                        <span class="text-danger" asp-validation-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Tuesday"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Wednesday" onblur="validateQuantity(this);" class="form-control font-weight-bold" />
                        <span class="text-danger" asp-validation-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Wednesday"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Thursday" onblur="validateQuantity(this);" class="form-control font-weight-bold" />
                        <span class="text-danger" asp-validation-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Thursday"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Friday" onblur="validateQuantity(this);" class="form-control font-weight-bold" />
                        <span class="text-danger" asp-validation-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Friday"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Saturday" onblur="validateQuantity(this);" class="form-control font-weight-bold" />
                        <span class="text-danger" asp-validation-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Saturday"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Sunday" onblur="validateQuantity(this);" class="form-control font-weight-bold" />
                        <span class="text-danger" asp-validation-for="@Model.RecipeChoices.Choices[i].OrderQuantity_Sunday"></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>

</form>

<div class="card">
    <div class="font-weight-bold bg-primary card-title">
        <div class="float-left">
            <a class="btn btn-large btn-primary" onclick="toggleTable('wholeWeekTable', 'wholeWeekTableToggleButtonIcon');" style="cursor:pointer;">
                <i class="fa fa-compress m-1" style="color:white" id="wholeWeekTableToggleButtonIcon" aria-hidden="true"></i>
            </a>
            Σύνολο Εβδομάδας : Προμηθευτές @(Model?.OrderProductItems.Select(i => i.Supplier.Id).Distinct().Count()) - Προϊόντα @(Model?.OrderProductItems.Count ?? 0)
        </div>
        <div class="float-right">
            Συνολικό Kόστος: @String.Format("{0:n}€", Model.OrderProductItems.Sum(o => (o.Product.Price * o.Quantity) / 100))
        </div>
    </div>
    <div class="card-body">
        <table id="wholeWeekTable" class="table table-sm table-striped">
            <tr>
                <th>Τύπος</th>
                <th>Προϊόν</th>
                <th>Ποσότητα</th>
                <th>Κόστος</th>
                <th>Προμηθευτής</th>
            </tr>
            @foreach (var o in Model.OrderProductItems)
            {
                <tr>
                    <td>@LanguageResources.GetProductTypeTranslation(@o.Product.ProductType)</td>
                    <td>@o.Product.Name</td>
                    <td><b>@String.Format("{0:n0}", o.Quantity)</b>&nbsp;@LanguageResources.GetMeasuringUnitTranslation(o.Product.MeasuringUnit)</td>
                    <td>@String.Format("{0:n}€", (o.Product.Price * o.Quantity) / 100)</td>
                    <td>@o.Product.Supplier.Name</td>
                </tr>
            }
        </table>
    </div>
</div>

<br />

@foreach (ProductDeliveryDay day in Model.ProductDeliveryPerDay.Keys.OrderBy(k => (int)k))
{
    <div class="card">
        <div class="font-weight-bold bg-secondary card-title">
            <div class="float-left">
                <a class="btn btn-secondary" onclick="toggleTable('@string.Format("div_"+day.ToString())', '@string.Format("toggleButtonIcon_"+day.ToString())');" style="cursor:pointer;">
                    <i class="fa fa-compress m-1" style="color:white" id="@string.Format("toggleButtonIcon_"+day.ToString())" aria-hidden="true"></i>
                </a>
                Παράδοση @day.ToString() :
                Προμηθευτές @Model.ProductDeliveryPerDay[day].Keys.ToList().Select(s => s.SupplierId).Distinct().Count() - Προϊόντα @Model.ProductDeliveryPerDay[day].Keys.Count()
            </div>
            <div class="float-right">
                Συνολικό Kόστος: @(String.Format("{0:n}€", Model.ProductDeliveryPerDay[day].Keys.ToList().Sum(i => (i.Price * Model.ProductDeliveryPerDay[day][i]) / 100)))
            </div>
        </div>
        <div class="card-body" id="@string.Format("div_"+day.ToString())">
            @foreach (var supplierProductKey in Model.ProductDeliveryPerDay[day].Keys.ToList().GroupBy(p => p.Supplier))
            {
                <div class="card">
                    <div class="bg-light card-title font-weight-bold text-secondary">
                        <a class="btn btn-lg" asp-page="./SendMail">
                            <i class="fa fa-envelope" data-toggle="tooltip" data-placement="top" title="Αποστολή με email"></i>
                        </a>
                        Προμηθευτής @supplierProductKey.Key.Name / Συνολικό Kόστος: @(String.Format("{0:n}€", Model.ProductDeliveryPerDay[day].Keys.Where(p => p.Supplier == supplierProductKey.Key).ToList().Sum(i => (i.Price * Model.ProductDeliveryPerDay[day][i]) / 100)))
                    </div>
                    <div class="card-body">
                        <table class="table table-sm table-striped">
                            <tr>
                                <th>Τύπος</th>
                                <th>Προϊόν</th>
                                <th>Ποσότητα</th>
                                <th>Κόστος</th>
                            </tr>
                            @foreach (var product in Model.ProductDeliveryPerDay[day].Keys.Where(p => p.Supplier == supplierProductKey.Key))
                            {
                                <tr>
                                    <td>@LanguageResources.GetProductTypeTranslation(@product.ProductType)</td>
                                    <td>@product.Name</td>
                                    <td><b>@String.Format("{0:n0}", Model.ProductDeliveryPerDay[day][product])</b>&nbsp;@LanguageResources.GetMeasuringUnitTranslation(product.MeasuringUnit)</td>
                                    <td>@String.Format("{0:n}€", (product.Price * Model.ProductDeliveryPerDay[day][product]) / 100)</td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>
                <br />
            }
        </div>
    </div>
    <hr />

}



<script type="text/javascript">

    $(function () {

        var selectedRecipeTypeId = localStorage.getItem('SelectedRecipeTypeId');
        if (typeof selectedRecipeTypeId == 'undefined')
            selectedRecipeTypeId = '1000';

        // by calling .change() we are firing the event to filter the recipe choices!
        $('#recipeDisplaySelect').val(selectedRecipeTypeId).change();
      
        var orderEditMainTableIsCompressed = localStorage.getItem('wholeWeekTableToggleButtonIcon_IsCompressed');
        if (orderEditMainTableIsCompressed) {
            compressTable('wholeWeekTable', $('#wholeWeekTableToggleButtonIcon'), false);
        }

        var keys = Object.keys(localStorage);
        for (i = 0; i < keys.length; i++) {

            if (!keys[i].endsWith('_IsCompressed') || !localStorage.getItem(keys[i]))
                continue;

            var info = keys[i].split('_');
            if (info.length != 3)
                continue;

            compressTable('div_'.concat(info[1]), $('#toggleButtonIcon_'.concat(info[1])), false);
        }
    });

    function validateQuantity(inputField) {
        if (inputField.value == '')
            inputField.value = '0';
        else if (isNaN(inputField.value))
            inputField.value = '0';
        else if (inputField.value < 0)
            inputField.value = '0';
        else if (inputField.value > 999)
            inputField.value = '999';

        return;
    }

    function recipeDisplaySelectionChanged(value) {

        localStorage.setItem('SelectedRecipeTypeId', value);

        if (value == '1000') {
            $('#recipeQuantityTable tr').each(function () {
                $(this).show();
            });
        }
        else if (value == '2000') {
            $('#recipeQuantityTable tr:not(:first)').each(function () {
                var row = $(this);
                var totalQuantity = 0;
                $(this).find("input.form-control").each(function () {
                    totalQuantity += parseInt($(this).val());
                });
                if (totalQuantity < 1)
                    row.hide();
                else
                    row.show();

            });
        }
        else {
            $('[name="recipeTypeId"]').each(function () {
                if ($(this).val() == value)
                    $(this).closest('tr').show();
                else
                    $(this).closest('tr').hide();
            });
        }
    }

    function expandTable(id, buttonObj) {
        $('#'.concat(id)).show(500);
        buttonObj.removeClass("fa-expand").addClass("fa-compress");
    }

    function compressTable(id, buttonObj, fade) {
        if (fade)
            $('#'.concat(id)).hide(500);
        else
            $('#'.concat(id)).hide();

        buttonObj.removeClass("fa-compress").addClass("fa-expand");
    }

    function toggleTable(id, toggleButtonIconId) {
        var buttonObj = $('#'.concat(toggleButtonIconId));

        if (buttonObj.hasClass("fa-compress")) {
            compressTable(id, buttonObj, true);
            localStorage.setItem(toggleButtonIconId.concat('_IsCompressed'), true);
        }
        else {
            expandTable(id, buttonObj);
            localStorage.removeItem(toggleButtonIconId.concat('_IsCompressed'));
        }
    }

</script>